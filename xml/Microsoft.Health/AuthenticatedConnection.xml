<Type Name="AuthenticatedConnection" FullName="Microsoft.Health.AuthenticatedConnection">
  <TypeSignature Language="C#" Value="public class AuthenticatedConnection : Microsoft.Health.ApplicationConnection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AuthenticatedConnection extends Microsoft.Health.ApplicationConnection" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Health.AuthenticatedConnection" />
  <TypeSignature Language="VB.NET" Value="Public Class AuthenticatedConnection&#xA;Inherits ApplicationConnection" />
  <TypeSignature Language="F#" Value="type AuthenticatedConnection = class&#xA;    inherit ApplicationConnection" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Health</AssemblyName>
    <AssemblyVersion>2.64.0.0</AssemblyVersion>
    <AssemblyVersion>2.68.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Health.ApplicationConnection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents an authenticated interface to the HealthVault service. Most
            operations performed against the service require authentication.
            </summary>
    <remarks>
            You must connect to the HealthVault service to access its
            web methods. This class does not maintain
            an open connection to the service, but uses XML over HTTP to 
            make requests and receive responses from the service. The connection
            only maintains the data necessary for the request.
            <br /><br />
            An authenticated connection takes the user name and password, 
            authenticates them against the HealthVault service, and then stores an 
            authentication token which is then passed to the service on each 
            subsequent request. An authenticated connection is required for 
            accessing a person's health record. 
            <br /><br />
            For operations that do not require user or application authentication, 
            use the <see cref="T:Microsoft.Health.AnonymousConnection" /> class.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AuthenticatedConnection (Microsoft.Health.Authentication.Credential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Health.Authentication.Credential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.#ctor(Microsoft.Health.Authentication.Credential)" />
      <MemberSignature Language="F#" Value="new Microsoft.Health.AuthenticatedConnection : Microsoft.Health.Authentication.Credential -&gt; Microsoft.Health.AuthenticatedConnection" Usage="new Microsoft.Health.AuthenticatedConnection credential" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Microsoft.Health.Authentication.Credential" />
      </Parameters>
      <Docs>
        <param name="credential">
            The credential of the user to authenticate for access to HealthVault.
            </param>
        <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.AuthenticatedConnection" />
            class with the specified credential.
            </summary>
        <remarks>
            The base class, <see cref="T:Microsoft.Health.ApplicationConnection" />, obtains an 
            application identifier and a service URL from the configuration file.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="credential" /> parameter is <b>null</b>.
            </exception>
        <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            The web or application configuration file does not contain 
            configuration entries for "ApplicationID" or "HealthServiceUrl".
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AuthenticatedConnection (Microsoft.Health.HealthServiceInstance serviceInstance, Microsoft.Health.Authentication.Credential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Health.HealthServiceInstance serviceInstance, class Microsoft.Health.Authentication.Credential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.#ctor(Microsoft.Health.HealthServiceInstance,Microsoft.Health.Authentication.Credential)" />
      <MemberSignature Language="F#" Value="new Microsoft.Health.AuthenticatedConnection : Microsoft.Health.HealthServiceInstance * Microsoft.Health.Authentication.Credential -&gt; Microsoft.Health.AuthenticatedConnection" Usage="new Microsoft.Health.AuthenticatedConnection (serviceInstance, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceInstance" Type="Microsoft.Health.HealthServiceInstance" />
        <Parameter Name="credential" Type="Microsoft.Health.Authentication.Credential" />
      </Parameters>
      <Docs>
        <param name="serviceInstance">
            The HealthVault web-service instance.
            </param>
        <param name="credential">
            The credential of the user to authenticate for access to HealthVault.
            </param>
        <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.AuthenticatedConnection" />
            class with the specified HealthVault web-service instance
            and credential.
            </summary>
        <remarks>
            If <paramref name="serviceInstance" /> is <b>null</b>, the URL for the configured
            default HealthVault web-service instance is used.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="credential" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AuthenticatedConnection (Guid callingApplicationId, Microsoft.Health.Authentication.Credential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid callingApplicationId, class Microsoft.Health.Authentication.Credential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,Microsoft.Health.Authentication.Credential)" />
      <MemberSignature Language="F#" Value="new Microsoft.Health.AuthenticatedConnection : Guid * Microsoft.Health.Authentication.Credential -&gt; Microsoft.Health.AuthenticatedConnection" Usage="new Microsoft.Health.AuthenticatedConnection (callingApplicationId, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callingApplicationId" Type="System.Guid" />
        <Parameter Name="credential" Type="Microsoft.Health.Authentication.Credential" />
      </Parameters>
      <Docs>
        <param name="callingApplicationId">
            The HealthVault application identifier.
            </param>
        <param name="credential">
            The credential of the user to authenticate for access to HealthVault.
            </param>
        <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.AuthenticatedConnection" />
            class with the specified application identifier, and 
            credential.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="credential" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AuthenticatedConnection (Guid callingApplicationId, Microsoft.Health.HealthServiceInstance serviceInstance, Microsoft.Health.Authentication.Credential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid callingApplicationId, class Microsoft.Health.HealthServiceInstance serviceInstance, class Microsoft.Health.Authentication.Credential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,Microsoft.Health.HealthServiceInstance,Microsoft.Health.Authentication.Credential)" />
      <MemberSignature Language="F#" Value="new Microsoft.Health.AuthenticatedConnection : Guid * Microsoft.Health.HealthServiceInstance * Microsoft.Health.Authentication.Credential -&gt; Microsoft.Health.AuthenticatedConnection" Usage="new Microsoft.Health.AuthenticatedConnection (callingApplicationId, serviceInstance, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callingApplicationId" Type="System.Guid" />
        <Parameter Name="serviceInstance" Type="Microsoft.Health.HealthServiceInstance" />
        <Parameter Name="credential" Type="Microsoft.Health.Authentication.Credential" />
      </Parameters>
      <Docs>
        <param name="callingApplicationId">
            The HealthVault application identifier.
            </param>
        <param name="serviceInstance">
            The HealthVault web-service instance.
            </param>
        <param name="credential">
            The credential of the user to authenticate for access to HealthVault.
            </param>
        <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.AuthenticatedConnection" />
            class with the specified application identifier, HealthVault web-service instance,
            and credential.
            </summary>
        <remarks>
            If <paramref name="serviceInstance" /> is <b>null</b>, the URL for the configured
            default HealthVault web-service instance is used.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="credential" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AuthenticatedConnection (Guid callingApplicationId, string healthServiceUrl, Microsoft.Health.Authentication.Credential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid callingApplicationId, string healthServiceUrl, class Microsoft.Health.Authentication.Credential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,System.String,Microsoft.Health.Authentication.Credential)" />
      <MemberSignature Language="F#" Value="new Microsoft.Health.AuthenticatedConnection : Guid * string * Microsoft.Health.Authentication.Credential -&gt; Microsoft.Health.AuthenticatedConnection" Usage="new Microsoft.Health.AuthenticatedConnection (callingApplicationId, healthServiceUrl, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callingApplicationId" Type="System.Guid" />
        <Parameter Name="healthServiceUrl" Type="System.String" />
        <Parameter Name="credential" Type="Microsoft.Health.Authentication.Credential" />
      </Parameters>
      <Docs>
        <param name="callingApplicationId">
            The HealthVault application identifier.
            </param>
        <param name="healthServiceUrl">
            A string representing the URL of the HealthVault web service.
            </param>
        <param name="credential">
            The credential of the user to authenticate for access to HealthVault.
            </param>
        <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.AuthenticatedConnection" />
            class with the specified application identifier, a string 
            representing the URL, and credential.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl" /> or 
            <paramref name="credential" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AuthenticatedConnection (Guid callingApplicationId, Uri healthServiceUrl, Microsoft.Health.Authentication.Credential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid callingApplicationId, class System.Uri healthServiceUrl, class Microsoft.Health.Authentication.Credential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.#ctor(System.Guid,System.Uri,Microsoft.Health.Authentication.Credential)" />
      <MemberSignature Language="F#" Value="new Microsoft.Health.AuthenticatedConnection : Guid * Uri * Microsoft.Health.Authentication.Credential -&gt; Microsoft.Health.AuthenticatedConnection" Usage="new Microsoft.Health.AuthenticatedConnection (callingApplicationId, healthServiceUrl, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="callingApplicationId" Type="System.Guid" />
        <Parameter Name="healthServiceUrl" Type="System.Uri" />
        <Parameter Name="credential" Type="Microsoft.Health.Authentication.Credential" />
      </Parameters>
      <Docs>
        <param name="callingApplicationId">
            The HealthVault application identifier.
            </param>
        <param name="healthServiceUrl">
            The URL of the HealthVault web service.
            </param>
        <param name="credential">
            The credential of the user to authenticate for access to HealthVault.
            </param>
        <summary>
            Creates an instance of the <see cref="T:Microsoft.Health.AuthenticatedConnection" />
            class with the specified application identifier, URL, and 
            credential.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The <paramref name="healthServiceUrl" /> or 
            <paramref name="credential" /> parameter is <b>null</b>.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public void Authenticate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Authenticate() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.Authenticate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Authenticate ()" />
      <MemberSignature Language="F#" Value="member this.Authenticate : unit -&gt; unit" Usage="authenticatedConnection.Authenticate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Logs on to the HealthVault service using the username and password.
            </summary>
        <remarks>
            It is not necessary to explicitly call this method before calling
            any of the methods that access the service. Those methods will 
            call this method if the user has not already been authenticated. 
            This method is provided as a convenience to allow for separate 
            error handling for authorization errors.
            </remarks>
        <exception cref="T:System.Security.SecurityException">
            The caller does not have permission to connect to the requested
            URI or a URI to which the request is redirected.
            </exception>
        <exception cref="T:System.UriFormatException">
            The authorization URL specified to the constructor is not a 
            valid URI.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            The authorization was not returned in the response from the 
            server.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllApplicationSettings">
      <MemberSignature Language="C#" Value="public Microsoft.Health.ApplicationSettings GetAllApplicationSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Health.ApplicationSettings GetAllApplicationSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.GetAllApplicationSettings" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllApplicationSettings () As ApplicationSettings" />
      <MemberSignature Language="F#" Value="member this.GetAllApplicationSettings : unit -&gt; Microsoft.Health.ApplicationSettings" Usage="authenticatedConnection.GetAllApplicationSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.ApplicationSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the application settings for the current application and person.
            </summary>
        <returns>
            A complete set of application settings including the XML, selected record ID, etc.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationSettings">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.IXPathNavigable GetApplicationSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XPath.IXPathNavigable GetApplicationSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.GetApplicationSettings" />
      <MemberSignature Language="VB.NET" Value="Public Function GetApplicationSettings () As IXPathNavigable" />
      <MemberSignature Language="F#" Value="member this.GetApplicationSettings : unit -&gt; System.Xml.XPath.IXPathNavigable" Usage="authenticatedConnection.GetApplicationSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.IXPathNavigable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the application settings for the current application and
            person.
            </summary>
        <returns>
            The application settings XML.
            </returns>
        <remarks>
            This might be <b>null</b> if no application settings have been 
            stored for the application or user.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Impersonate">
      <MemberSignature Language="C#" Value="public void Impersonate (Guid targetPersonId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Impersonate(valuetype System.Guid targetPersonId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Impersonate (targetPersonId As Guid)" />
      <MemberSignature Language="F#" Value="member this.Impersonate : Guid -&gt; unit" Usage="authenticatedConnection.Impersonate targetPersonId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetPersonId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="targetPersonId">
            The unique identifier for the person to impersonate.
            </param>
        <summary>
            Sets the identifier for the person being impersonated.
            </summary>
        <remarks>
            Impersonation occurs when the authenticated person wants to make
            a request to the HealthVault service on behalf of another person. This
            should not occur in most applications.
            <br /><br />
            The authenticated person must have the rights to call the requested
            method for the person being impersonated. If that right exists, all
            security processing occurs using the impersonated person's 
            identity. If the right does not exist, the caller receives an
            <see cref="T:Microsoft.Health.HealthServiceAccessDeniedException" /> upon the first 
            invocation of a method that accesses the HealthVault service.
            <br /><br />
            To start impersonating, call the <see cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)" /> method.
            To stop impersonating, call the <see cref="M:Microsoft.Health.AuthenticatedConnection.StopImpersonating" />
            method.
            </remarks>
        <exception cref="T:System.ArgumentException">
            The <paramref name="targetPersonId" /> parameter is Guid.Empty.
            </exception>
        <altmember cref="M:Microsoft.Health.AuthenticatedConnection.StopImpersonating" />
        <altmember cref="P:Microsoft.Health.AuthenticatedConnection.IsImpersonating" />
      </Docs>
    </Member>
    <Member MemberName="IsImpersonating">
      <MemberSignature Language="C#" Value="public bool IsImpersonating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImpersonating" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Health.AuthenticatedConnection.IsImpersonating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImpersonating As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsImpersonating : bool" Usage="Microsoft.Health.AuthenticatedConnection.IsImpersonating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Gets the value which states whether or not the current connection
             is impersonating a different user than who is authenticated.
             </summary>
        <value>
          <b>true</b> if <see cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)" /> has been called with a 
             valid target person identifier and <see cref="M:Microsoft.Health.AuthenticatedConnection.StopImpersonating" /> 
             has not been called; otherwise, <b>false</b>.
             </value>
        <remarks>
             Impersonation occurs when the authenticated person wants to make
             a request to the HealthVault service on behalf of another person. This
             should not occur in most applications.
             <br /><br />
             The authenticated person must have the rights to call the requested
             method for the person being impersonated. If that right exists, all
             security processing occurs using the impersonated person's 
             identity. If the right does not exist, the caller receives a
             <see cref="T:Microsoft.Health.HealthServiceAccessDeniedException" /> upon the first 
             invocation of a method that accesses the HealthVault service.
             <br /><br />
             To start impersonating, call the <see cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)" /> method.
             To stop impersonating, call the <see cref="M:Microsoft.Health.AuthenticatedConnection.StopImpersonating" />
             method.
             </remarks>
        <altmember cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)" />
        <altmember cref="M:Microsoft.Health.AuthenticatedConnection.StopImpersonating" />
      </Docs>
    </Member>
    <Member MemberName="LogOn">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.AuthenticatedConnection LogOn (string liveIdTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.AuthenticatedConnection LogOn(string liveIdTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogOn (liveIdTicket As String) As AuthenticatedConnection" />
      <MemberSignature Language="F#" Value="static member LogOn : string -&gt; Microsoft.Health.AuthenticatedConnection" Usage="Microsoft.Health.AuthenticatedConnection.LogOn liveIdTicket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.AuthenticatedConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="liveIdTicket" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="liveIdTicket">
            A Live ID ticket that was retrieved using the Live ID client APIs (IDCRL).
            </param>
        <summary>
            Uses the specified Live ID ticket to authenticate the user with HealthVault.
            </summary>
        <returns>
            An <see cref="T:Microsoft.Health.AuthenticatedConnection" /> to HealthVault for the user specified in the
            <paramref name="liveIdTicket" />.
            </returns>
        <remarks>
            The calling ApplicationId, HealthServiceUrl, and ShellUrl are retrieved from the
            app.config file for the application.
            </remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="liveIdTicket" /> or is <b>null</b> or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If verification of the passport ticket fails or there is a failure
            in finding a HealthVault account for the specified <paramref name="liveIdTicket" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LogOn">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.AuthenticatedConnection LogOn (string liveIdTicket, bool isMra);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.AuthenticatedConnection LogOn(string liveIdTicket, bool isMra) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogOn (liveIdTicket As String, isMra As Boolean) As AuthenticatedConnection" />
      <MemberSignature Language="F#" Value="static member LogOn : string * bool -&gt; Microsoft.Health.AuthenticatedConnection" Usage="Microsoft.Health.AuthenticatedConnection.LogOn (liveIdTicket, isMra)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.AuthenticatedConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="liveIdTicket" Type="System.String" />
        <Parameter Name="isMra" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="liveIdTicket">
            A Live ID ticket that was retrieved using the Live ID client APIs (IDCRL).
            </param>
        <param name="isMra">
            True if the application is a multi-record application, or false otherwise. Multi-record
            applications can work with many user records at one time and does not rely on the
            selected record when performing operations.
            </param>
        <summary>
            Uses the specified Live ID ticket to authenticate the user with HealthVault.
            </summary>
        <returns>
            An <see cref="T:Microsoft.Health.AuthenticatedConnection" /> to HealthVault for the user specified in the
            <paramref name="liveIdTicket" />.
            </returns>
        <remarks>
            The calling ApplicationId, HealthServiceUrl, and ShellUrl are retrieved from the
            app.config file for the application.
            </remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="liveIdTicket" /> or is <b>null</b> or empty.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceException">
            If verification of the passport ticket fails or there is a failure
            in finding a HealthVault account for the specified <paramref name="liveIdTicket" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LogOn">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.AuthenticatedConnection LogOn (string liveIdTicket, bool isMra, System.Threading.ManualResetEvent cancelTrigger);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.AuthenticatedConnection LogOn(string liveIdTicket, bool isMra, class System.Threading.ManualResetEvent cancelTrigger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Threading.ManualResetEvent)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogOn (liveIdTicket As String, isMra As Boolean, cancelTrigger As ManualResetEvent) As AuthenticatedConnection" />
      <MemberSignature Language="F#" Value="static member LogOn : string * bool * System.Threading.ManualResetEvent -&gt; Microsoft.Health.AuthenticatedConnection" Usage="Microsoft.Health.AuthenticatedConnection.LogOn (liveIdTicket, isMra, cancelTrigger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.AuthenticatedConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="liveIdTicket" Type="System.String" />
        <Parameter Name="isMra" Type="System.Boolean" />
        <Parameter Name="cancelTrigger" Type="System.Threading.ManualResetEvent" />
      </Parameters>
      <Docs>
        <param name="liveIdTicket">
            A Live ID ticket that was retrieved using the IDCRL.
            </param>
        <param name="isMra">
            True if the application is a multi-record application, or false otherwise. Multi-record
            applications can work with many user records at one time and does not rely on the
            selected record when performing operations.
            </param>
        <param name="cancelTrigger">
            If the event gets triggered the log on request will be cancelled resulting in an
            <see cref="T:Microsoft.Health.HealthServiceRequestCancelledException" />.
            </param>
        <summary>
            Uses the specified Live ID ticket to authenticate the user with HealthVault.
            </summary>
        <returns>
            An <see cref="T:Microsoft.Health.AuthenticatedConnection" /> to HealthVault for the user specified in the
            <paramref name="liveIdTicket" />.
            </returns>
        <remarks>
            The calling ApplicationId, HealthServiceUrl, and ShellUrl are retrieved from the
            app.config file for the application.
            </remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="liveIdTicket" /> or is <b>null</b> or empty.
            </exception>
        <exception cref="T:System.Net.WebException">
            If the request to the HealthVault Shell to verify the <paramref name="liveIdTicket" />
            fails.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceAccessDeniedException">
            If the user specified in the <paramref name="liveIdTicket" /> could not be authenticated
            to HealthVault.
            </exception>
        <exception cref="T:Microsoft.Health.InvalidConfigurationException">
            If either the application identifier, platform URL or the shell URL is
            missing from the configuration.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LogOn">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.AuthenticatedConnection LogOn (string liveIdTicket, bool isMra, System.Threading.ManualResetEvent cancelTrigger, Guid applicationId, Uri shellUrl, Uri healthServiceUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.AuthenticatedConnection LogOn(string liveIdTicket, bool isMra, class System.Threading.ManualResetEvent cancelTrigger, valuetype System.Guid applicationId, class System.Uri shellUrl, class System.Uri healthServiceUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Threading.ManualResetEvent,System.Guid,System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogOn (liveIdTicket As String, isMra As Boolean, cancelTrigger As ManualResetEvent, applicationId As Guid, shellUrl As Uri, healthServiceUrl As Uri) As AuthenticatedConnection" />
      <MemberSignature Language="F#" Value="static member LogOn : string * bool * System.Threading.ManualResetEvent * Guid * Uri * Uri -&gt; Microsoft.Health.AuthenticatedConnection" Usage="Microsoft.Health.AuthenticatedConnection.LogOn (liveIdTicket, isMra, cancelTrigger, applicationId, shellUrl, healthServiceUrl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.AuthenticatedConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="liveIdTicket" Type="System.String" />
        <Parameter Name="isMra" Type="System.Boolean" />
        <Parameter Name="cancelTrigger" Type="System.Threading.ManualResetEvent" />
        <Parameter Name="applicationId" Type="System.Guid" />
        <Parameter Name="shellUrl" Type="System.Uri" />
        <Parameter Name="healthServiceUrl" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="liveIdTicket">
            A Live ID ticket that was retrieved using the IDCRL.
            </param>
        <param name="isMra">
            True if the application is a multi-record application, or false otherwise. Multi-record
            applications can work with many user records at one time and does not rely on the
            selected record when performing operations.
            </param>
        <param name="cancelTrigger">
            If the event gets triggered the log on request will be cancelled resulting in an
            <see cref="T:Microsoft.Health.HealthServiceRequestCancelledException" />.
            </param>
        <param name="applicationId">
            The unique HealthVault application identifier that the user is being logged into.
            </param>
        <param name="shellUrl">
            The HealthVault Shell redirector URL. This is used to verify the Live ID ticket before 
            authenticating the user to HealthVault.
            </param>
        <param name="healthServiceUrl">
            The URL of the HealthVault service. Note, this must include the web service handler, 
            "wildcat.ashx".
            </param>
        <summary>
            Uses the specified Live ID ticket to authenticate the user with HealthVault.
            </summary>
        <returns>
            An <see cref="T:Microsoft.Health.AuthenticatedConnection" /> to HealthVault for the user specified in the
            <paramref name="liveIdTicket" />.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="liveIdTicket" /> or is <b>null</b> or empty, or
            <paramref name="applicationId" /> is <see cref="F:System.Guid.Empty" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="shellUrl" /> or <paramref name="healthServiceUrl" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.Net.WebException">
            If the request to the HealthVault Shell to verify the <paramref name="liveIdTicket" />
            fails.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceAccessDeniedException">
            If the user specified in the <paramref name="liveIdTicket" /> could not be authenticated
            to HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="LogOn">
      <MemberSignature Language="C#" Value="public static Microsoft.Health.AuthenticatedConnection LogOn (string liveIdTicket, bool isMra, bool isPersistent, System.Threading.ManualResetEvent cancelTrigger, Guid applicationId, Uri shellUrl, Uri healthServiceUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Health.AuthenticatedConnection LogOn(string liveIdTicket, bool isMra, bool isPersistent, class System.Threading.ManualResetEvent cancelTrigger, valuetype System.Guid applicationId, class System.Uri shellUrl, class System.Uri healthServiceUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.LogOn(System.String,System.Boolean,System.Boolean,System.Threading.ManualResetEvent,System.Guid,System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogOn (liveIdTicket As String, isMra As Boolean, isPersistent As Boolean, cancelTrigger As ManualResetEvent, applicationId As Guid, shellUrl As Uri, healthServiceUrl As Uri) As AuthenticatedConnection" />
      <MemberSignature Language="F#" Value="static member LogOn : string * bool * bool * System.Threading.ManualResetEvent * Guid * Uri * Uri -&gt; Microsoft.Health.AuthenticatedConnection" Usage="Microsoft.Health.AuthenticatedConnection.LogOn (liveIdTicket, isMra, isPersistent, cancelTrigger, applicationId, shellUrl, healthServiceUrl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Health.AuthenticatedConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="liveIdTicket" Type="System.String" />
        <Parameter Name="isMra" Type="System.Boolean" />
        <Parameter Name="isPersistent" Type="System.Boolean" />
        <Parameter Name="cancelTrigger" Type="System.Threading.ManualResetEvent" />
        <Parameter Name="applicationId" Type="System.Guid" />
        <Parameter Name="shellUrl" Type="System.Uri" />
        <Parameter Name="healthServiceUrl" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="liveIdTicket">
            A Live ID ticket that was retrieved using the IDCRL.
            </param>
        <param name="isMra">
            True if the application is a multi-record application, or false otherwise. Multi-record
            applications can work with many user records at one time and does not rely on the
            selected record when performing operations.
            </param>
        <param name="isPersistent">
            True if creating a persistent token, or false otherwise.  Persistent connections
            remain valid for the duration specified in the application's configuration within
            HealthVault.  Typically, persistent tokens are valid for up to one year.
            </param>
        <param name="cancelTrigger">
            If the event gets triggered the log on request will be cancelled resulting in an
            <see cref="T:Microsoft.Health.HealthServiceRequestCancelledException" />.
            </param>
        <param name="applicationId">
            The unique HealthVault application identifier that the user is being logged into.
            </param>
        <param name="shellUrl">
            The HealthVault Shell redirector URL. This is used to verify the Live ID ticket before 
            authenticating the user to HealthVault.
            </param>
        <param name="healthServiceUrl">
            The URL of the HealthVault service. Note, this must include the web service handler, 
            "wildcat.ashx".
            </param>
        <summary>
            Uses the specified Live ID ticket to authenticate the user with HealthVault.
            </summary>
        <returns>
            An <see cref="T:Microsoft.Health.AuthenticatedConnection" /> to HealthVault for the user specified in the
            <paramref name="liveIdTicket" />.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            If <paramref name="liveIdTicket" /> or is <b>null</b> or empty, or
            <paramref name="applicationId" /> is <see cref="F:System.Guid.Empty" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            If <paramref name="shellUrl" /> or <paramref name="healthServiceUrl" /> is <b>null</b>.
            </exception>
        <exception cref="T:System.Net.WebException">
            If the request to the HealthVault Shell to verify the <paramref name="liveIdTicket" />
            fails.
            </exception>
        <exception cref="T:Microsoft.Health.HealthServiceAccessDeniedException">
            If the user specified in the <paramref name="liveIdTicket" /> could not be authenticated
            to HealthVault.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SetApplicationSettings">
      <MemberSignature Language="C#" Value="public void SetApplicationSettings (System.Xml.XPath.IXPathNavigable applicationSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetApplicationSettings(class System.Xml.XPath.IXPathNavigable applicationSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.SetApplicationSettings(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetApplicationSettings (applicationSettings As IXPathNavigable)" />
      <MemberSignature Language="F#" Value="member this.SetApplicationSettings : System.Xml.XPath.IXPathNavigable -&gt; unit" Usage="authenticatedConnection.SetApplicationSettings applicationSettings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationSettings" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="applicationSettings">
            The application settings XML.
            </param>
        <summary>
            Sets the application settings for the current application and
            person.
            </summary>
        <remarks>
            This might be <b>null</b> if no application settings have been stored
            for the application or user.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopImpersonating">
      <MemberSignature Language="C#" Value="public void StopImpersonating ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopImpersonating() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Health.AuthenticatedConnection.StopImpersonating" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopImpersonating ()" />
      <MemberSignature Language="F#" Value="member this.StopImpersonating : unit -&gt; unit" Usage="authenticatedConnection.StopImpersonating " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Health</AssemblyName>
        <AssemblyVersion>2.64.0.0</AssemblyVersion>
        <AssemblyVersion>2.68.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Unsets the target person identifier for all requests.
            </summary>
        <remarks>
            All future requests will act as the authenticated person.
            <br /><br />
            Note, to change the person that is being impersonated,
            StopImpersonating does not have to be called. 
            <see cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)" /> can be called directly with a
            new target person identifier.
            <br /><br />
            Impersonation occurs when the authenticated person wants to make
            a request to the HealthVault service on behalf of another person. This
            should not occur in most applications.
            <br /><br />
            The authenticated person must have the rights to call the requested
            method for the person being impersonated. If that right exists, all
            security processing occurs using the impersonated person's 
            identity. If the right does not exist, the caller receives a
            <see cref="T:Microsoft.Health.HealthServiceAccessDeniedException" /> upon the first 
            invocation of a method that accesses the HealthVault service.
            <br /><br />
            To start impersonating, call the <see cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)" /> method.
            To stop impersonating, call the <see cref="M:Microsoft.Health.AuthenticatedConnection.StopImpersonating" />
            method.
            </remarks>
        <altmember cref="M:Microsoft.Health.AuthenticatedConnection.Impersonate(System.Guid)" />
        <altmember cref="P:Microsoft.Health.AuthenticatedConnection.IsImpersonating" />
      </Docs>
    </Member>
  </Members>
</Type>